#! /bin/sh
### BEGIN INIT INFO
# Provides:          naro-usc-server
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Naro Nanins USC server startup script.
# Description:       This script starts and stops the USB servo controller
#                    server for the Naro Nanins ROS bindings and should be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Ralf Kaestner <ralf.kaestner@gmail.com>

USER=naro
GROUP=naro
HOME=/home/naro

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Naro Nanins USC server"
SCRIPTNAME=/etc/init.d/naro-usc-server

# Read configuration variable file if it is present
[ -r /etc/naro/ros.conf ] && . /etc/naro/ros.conf

SETUP=/opt/ros/$ROS_DISTRIBUTION/setup.sh

# Exit if the ROS distribution is not installed
[ -e "$SETUP" ] || exit 0

# Load the ROS environment
. $SETUP

# Read defaults if they are present
[ -r /etc/naro/default/usc-server ] && . /etc/naro/default/usc-server

# Exit if daemon shall not run at boot time
[ "$RUN" = "yes" ] || exit 0

NAME=usc_server
PIDFILE=$HOME/.ros/$NAME.pid
DAEMON=/opt/ros/$ROS_DISTRIBUTION/bin/roslaunch
DAEMON_ARGS="--pid=$PIDFILE --wait naro_usc_srvs usc_server.launch"

# Exit if daemon is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started
  start-stop-daemon --start --background --quiet --pidfile $PIDFILE \
    --exec $DAEMON --chuid $USER:$GROUP --test > /dev/null || return 1
  start-stop-daemon --start --background --quiet --pidfile $PIDFILE \
    --exec $DAEMON --chuid $USER:$GROUP -- $DAEMON_ARGS || return 2
  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE \
    --name roslaunch --user $USER --group $GROUP
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  # Wait for children to finish too if this is a daemon that forks
  # and if the daemon is only ever run from this initscript.
  # If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be
  # needed by services started subsequently.  A last resort is to
  # sleep for some time.
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 \
    --exec $DAEMON --user $USER --group $GROUP
  [ "$?" = 2 ] && return 2

  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload()
{
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE \
    --name roslaunch --user $USER --group $GROUP
  return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;

  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;

  status)
    status_of_proc -p $PIDFILE "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;

  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
      do_start
      case "$?" in
        0) log_end_msg 0 ;;
        1) log_end_msg 1 ;; # Old process is still running
        *) log_end_msg 1 ;; # Failed to start
      esac
      ;;
      *)
      # Failed to stop
      log_end_msg 1
      ;;
    esac
    ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
